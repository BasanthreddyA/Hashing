/*
 Leetcode Question Link : https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/solutions/
 Leetcode Solution Link : https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/solutions/3342642/java-brute-force-optimal-solution-easy-to-understand/

Approach
So the idea is:
Let's use this input for illustration: [8,1,2,2,3]

Create a copy of the input array. copy = [8,1,2,2,3]
Sort the copy array. copy = [1,2,2,3,8]
Fill the map: number => count (where count is an index in sorted array, so first number with index 0 has 0 numbers less than it, index 1 has 1 number less, etc). We update only first time we enocunter the number so that way we skip duplicates.
map[1]=>0
map[2]=>1
map[3]=>3
map[8]=>4
We re-use our copy array to get our result, we iterate over original array, and get counts from the map.
[4,0,1,1,3]
*/


class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
       int[] cop=nums.clone();
       Map<Integer,Integer> mp=new HashMap<>();

        Arrays.sort(cop);

        for(int i=0;i<nums.length;i++){
            mp.putIfAbsent(cop[i],i);
        }

        for(int i=0;i<nums.length;i++){
            cop[i]=mp.get(nums[i]);
        }
        return cop;
       
    }
}